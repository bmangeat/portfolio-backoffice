{"version":3,"sources":["services/auth.service.js","components/login.component.js","components/register.component.js","services/auth-header.js","services/user.service.js","components/home.component.js","components/profile.component.js","components/board-user.component.js","components/board.admin.component.js","components/board.moderator.component.js","components/App.js","serviceWorker.js","index.js"],"names":["API_URL","username","password","axios","post","then","response","data","accessToken","localStorage","setItem","JSON","stringify","removeItem","email","parse","getItem","required","value","className","role","Login","history","useHistory","useState","setUsername","setPassword","loginMessage","setLoginMessage","loading","setLoading","loginForm","React","createRef","checkBtn","src","alt","onSubmit","event","preventDefault","validateAll","context","_errors","length","AuthService","login","push","window","location","reload","error","message","toString","ref","c","htmlFor","type","name","onChange","target","validations","disabled","style","display","vemail","isEmail","vusername","lenght","vpassword","Register","setEmail","registerMessage","setRegisterMessage","successful","setSuccessful","registerForm","register","err","authHeader","user","get","headers","Home","useEffect","UserService","getPublicContent","setHomeContent","homeContent","Profile","getCurrentUser","currentUser","substring","substr","id","roles","map","index","key","UserBoard","getUserBoard","setUserContent","userContent","AdminBoard","getAdminBoard","setAdminContent","adminContent","ModBoard","getModBoard","setModContent","modContent","App","setCurrentUser","setShowModeratorBoard","includes","setShowAdminBoard","showModeratorBoard","showAdminBoard","undefined","to","href","onClick","logout","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.b5b9ec90.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst API_URL = 'https://portfolio-api-bricemangeat.herokuapp.com/'\n\nclass AuthService {\n    login( username, password ) {\n        return axios\n            .post( API_URL + `api/auth/signin`, {\n                username,\n                password\n            } )\n            .then( response => {\n                if ( response.data.accessToken ) {\n                    localStorage.setItem( 'user', JSON.stringify( response.data ) )\n                }\n                return response.data\n            } )\n    }\n\n    logout() {\n        localStorage.removeItem( 'user' )\n    }\n\n    register( username, email, password ) {\n        return axios\n            .post( API_URL + `api/auth/signup`, {\n                username,\n                email,\n                password\n            } )\n\n    }\n\n    getCurrentUser() {\n        return JSON.parse( localStorage.getItem( 'user' ) )\n    }\n}\n\nexport default new AuthService();\n\n","import React, { useState } from \"react\";\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport CheckButton from \"react-validation/build/button\";\nimport { useHistory } from \"react-router-dom\";\n\n\nimport AuthService from \"../services/auth.service\";\n\nconst required = value => {\n    if ( !value ) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                This field is required!\n            </div>\n        );\n    }\n};\n// #TODO: Upgrade Forms and Input (deprecated)\nconst Login = () => {\n    const history = useHistory();\n\n    const [ username, setUsername ] = useState( '' )\n    const [ password, setPassword ] = useState( '' )\n    const [ loginMessage, setLoginMessage ] = useState( '' )\n    const [ loading, setLoading ] = useState( false )\n\n    let loginForm = React.createRef()\n    let checkBtn = React.createRef()\n\n    const handleLogin = ( event ) => {\n        event.preventDefault()\n\n        setLoading( true )\n\n        loginForm.validateAll()\n        if ( checkBtn.context._errors.length === 0 ) {\n            AuthService.login( username, password )\n                .then(\n                    () => {\n                        history.push( \"/profile\" );\n                        window.location.reload();\n                    },\n                    ( error ) => {\n                        setLoading( false )\n                        setLoginMessage(\n                            (error.response &&\n                                error.response.data &&\n                                error.response.data.message) ||\n                            error.message ||\n                            error.toString()\n                        )\n                    }\n                )\n        } else {\n            setLoading( false )\n        }\n    }\n\n    return (\n        <div className=\"col-md-12\">\n            <div className=\"card card-container\">\n                <img\n                    src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n                    alt=\"profile-img\"\n                    className=\"profile-img-card\"\n                />\n                <Form onSubmit={handleLogin}\n                      ref={c => {\n                          loginForm = c\n                      }}>\n                    <div className=\"form-group\">\n\n                        <label htmlFor=\"username\">Username</label>\n                        <Input\n                            type=\"text\"\n                            className=\"form-control\"\n                            name=\"username\"\n                            value={username}\n                            onChange={( event ) => setUsername( event.target.value )}\n                            validations={[ required ]}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"password\">Password</label>\n                        <Input\n                            type=\"password\"\n                            className=\"form-control\"\n                            name=\"password\"\n                            value={password}\n                            onChange={( event ) => setPassword( event.target.value )}\n                            validations={[ required ]}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <button\n                            className=\"btn btn-primary btn-block\"\n                            disabled={loading}\n                        >\n                            {loading && (\n                                <span className=\"spinner-border spinner-border-sm\"/>\n                            )}\n                            <span>Login</span>\n                        </button>\n                    </div>\n\n                    {loginMessage && (\n                        <div className=\"form-group\">\n                            <div className=\"alert alert-danger\" role=\"alert\">\n                                {loginMessage}\n                            </div>\n                        </div>\n                    )}\n                    <CheckButton\n                        style={{ display: \"none\" }}\n                        ref={c => {\n                            checkBtn = c\n                        }}\n                    />\n                </Form>\n            </div>\n        </div>\n    )\n}\n\nexport default Login\n","import React, { useState } from \"react\"\nimport Form from \"react-validation/build/form\"\nimport Input from \"react-validation/build/input\"\nimport CheckButton from \"react-validation/build/button\"\nimport { isEmail } from \"validator\"\n\nimport AuthService from \"../services/auth.service\"\n\nconst required = value => {\n    if ( !value ) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                This field is required\n            </div>\n        )\n    }\n}\n\nconst vemail = value => {\n    if ( !isEmail( value ) ) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                This is not a valid email.\n            </div>\n        )\n    }\n}\n\nconst vusername = value => {\n    if ( value.lenght < 3 || value.lenght > 20 ) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                The username must be between 3 and 20 characters.\n            </div>\n        )\n    }\n}\n\nconst vpassword = value => {\n    if ( value.lenght < 6 || value.lenght > 40 ) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                The password must be between 6 and 40 characters.\n            </div>\n        )\n    }\n}\n\nconst Register = () => {\n    const [ username, setUsername ] = useState( '' )\n    const [ email, setEmail ] = useState( '' )\n    const [ password, setPassword ] = useState( '' )\n    const [ registerMessage, setRegisterMessage ] = useState( '' )\n    const [ successful, setSuccessful ] = useState( false )\n\n    let registerForm = React.createRef()\n    let checkBtn = React.createRef()\n\n    const handleRegister = ( event ) => {\n        event.preventDefault()\n        registerForm.validateAll()\n\n        if ( checkBtn.context._errors.length === 0 ) {\n            AuthService.register( username, email, password )\n                .then(\n                    ( response ) => {\n                        setRegisterMessage( response.data.message )\n                        setSuccessful( true )\n\n                    },\n                    ( err ) => {\n                        setSuccessful( false )\n                        setRegisterMessage(\n                            (err.response && err.response.data && err.response.data.message) ||\n                            err.message ||\n                            err.toString() )\n                    }\n                )\n        }\n    }\n\n    return (\n        <div className=\"col-md-12\">\n            <div className=\"card card-container\">\n                <img\n                    src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n                    alt=\"profile-img\"\n                    className=\"profile-img-card\"\n                />\n\n                <Form\n                    onSubmit={handleRegister}\n                    ref={c => {\n                        registerForm = c;\n                    }}>\n\n                    {!successful && (\n                        <div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"username\">Username</label>\n                                <Input\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                    name=\"username\"\n                                    value={username}\n                                    onChange={( event ) => {\n                                        setUsername( event.target.value )\n                                    }}\n                                    validations={[ required, vusername ]}\n                                />\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"email\">Email</label>\n                                <Input\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                    name=\"email\"\n                                    value={email}\n                                    onChange={(event) => {setEmail(event.target.value)}}\n                                    validations={[ required, vemail ]}\n                                />\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"password\">Password</label>\n                                <Input\n                                    type=\"password\"\n                                    className=\"form-control\"\n                                    name=\"password\"\n                                    value={password}\n                                    onChange={(event) => {setPassword(event.target.value)}}\n                                    validations={[ required, vpassword ]}\n                                />\n                            </div>\n\n                            <div className=\"form-group\">\n                                <button className=\"btn btn-primary btn-block\">Sign Up</button>\n                            </div>\n                        </div>\n                    )}\n\n                    {registerMessage && (\n                        <div className=\"form-group\">\n                            <div\n                                className={\n                                    successful\n                                        ? \"alert alert-success\"\n                                        : \"alert alert-danger\"\n                                }\n                                role=\"alert\"\n                            >\n                                {registerMessage}\n                            </div>\n                        </div>\n                    )}\n                    <CheckButton\n                        style={{ display: \"none\" }}\n                        ref={c => {\n                            checkBtn = c;\n                        }}\n                    />\n                </Form>\n\n            </div>\n        </div>\n    )\n}\n\nexport default Register\n\n","export default authHeader => {\n    const user = JSON.parse(localStorage.getItem('user'))\n\n    if(user && user.accessToken) {\n        return { 'jwt-token': user.accessToken}\n    } else {\n        return {}\n    }\n}\n","import axios from 'axios'\nimport authHeader from './auth-header'\n\nconst API_URL = 'https://portfolio-api-bricemangeat.herokuapp.com/api/test/'\n\nclass UserService {\n    getPublicContent() {\n        return axios\n            .get( API_URL + `all` )\n    }\n\n    getUserBoard() {\n        return axios\n            .get( API_URL + `user`, { headers: authHeader() } )\n    }\n\n    getModBoard() {\n        return axios\n            .get( API_URL + `mod`, { headers: authHeader() } )\n    }\n\n    getAdminBoard() {\n        return axios\n            .get( API_URL + `admin`, { headers: authHeader() } )\n    }\n}\n\nexport default new UserService()\n","import React, { useEffect, useState } from \"react\"\n\nimport UserService from \"../services/user.service\"\n\nconst Home = () => {\n    useEffect(()=>{\n        UserService.getPublicContent()\n            .then(\n                response => {\n                    setHomeContent(response.data)\n                },\n                err => {\n                    setHomeContent((err.response && err.response.data) || err.message || err.toString())\n                }\n            )\n    })\n\n    const [homeContent, setHomeContent] = useState(\"\")\n\n    return (\n        <div className=\"container\">\n            <header className=\"jumbotron\">\n                <h3>{homeContent}</h3>\n            </header>\n        </div>\n    )\n}\n\nexport default Home\n","import React, { useState } from \"react\"\n\n// Import services\nimport AuthService from \"../services/auth.service\"\n\nconst Profile = () => {\n    const [ currentUser ] = useState( AuthService.getCurrentUser() )\n\n    return (\n        <div className=\"container\">\n            <header className=\"jumbotron\">\n                <h3>\n                    {currentUser.username} Profile\n                </h3>\n            </header>\n            <p>\n                <strong>Token : </strong>\n                {currentUser.accessToken.substring( 0, 20 )} ... {\" \"}\n                {currentUser.accessToken.substr( currentUser.accessToken.length - 20 )}\n            </p>\n\n            <p>\n                <strong>ID : </strong>\n                {currentUser.id}\n            </p>\n\n            <p>\n                <strong>Email : </strong>\n                {currentUser.email}\n            </p>\n            <strong>Authorities</strong>\n            <ul>\n                {currentUser.roles &&\n                currentUser.roles.map( ( role, index ) => <li key={index}>{role}</li> )}\n            </ul>\n        </div>\n    )\n}\n\nexport default Profile\n","import React, { useEffect, useState } from \"react\"\n\nimport UserService from \"../services/user.service\"\n\nconst UserBoard = () => {\n\n    useEffect( () => {\n        UserService.getUserBoard()\n            .then(\n                response => {\n                    setUserContent( response.data )\n                },\n                err => {\n                    setUserContent( (err.response && err.response.data && err.response.data) || err.message || err.toString() )\n                }\n            )\n    }, [] )\n\n    const [ userContent, setUserContent ] = useState(\"\")\n\n    return (\n        <div className=\"container\">\n            <header className=\"jumbotron\">\n                <h3>{userContent}</h3>\n            </header>\n        </div>\n    )\n\n}\n\nexport default UserBoard\n","import React, { useEffect, useState } from \"react\"\n\nimport UserService from \"../services/user.service\"\n\nconst AdminBoard = () => {\n\n    useEffect( () => {\n        UserService.getAdminBoard()\n            .then(\n                response => {\n                    setAdminContent( response.data )\n                },\n                err => {\n                    setAdminContent( (err.response && err.response.data && err.response.data) || err.message || err.toString() )\n                }\n            )\n    }, [] )\n    const [ adminContent, setAdminContent ] = useState( \"\" )\n\n    return (\n        <div className=\"container\">\n            <header className=\"jumbotron\">\n                <h3>{adminContent}</h3>\n            </header>\n        </div>\n    )\n}\n\nexport default AdminBoard\n","import React, { useEffect, useState } from \"react\"\n\nimport UserService from \"../services/user.service\"\n\nconst ModBoard = () => {\n\n    useEffect(() => {\n        UserService.getModBoard()\n            .then(\n                response => {\n                    setModContent( response.data )\n                },\n                err => {\n                    setModContent( (err.response && err.response.data && err.response.data) || err.message || err.toString() )\n                }\n            )\n    }, [])\n    const [modContent, setModContent] = useState(\"\")\n\n    return(\n        <div className=\"container\">\n            <header className=\"jumbotron\">\n                <h3>{modContent}</h3>\n            </header>\n        </div>\n    )\n\n}\n\nexport default ModBoard\n","import React, { useState, useEffect } from \"react\"\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport \"../App.css\"\n\n// Import services\nimport AuthService from \"../services/auth.service\"\n\n// Import components\nimport Login from \"./login.component\"\nimport Register from \"./register.component\"\nimport Home from \"./home.component\"\nimport Profile from \"./profile.component\"\nimport UserBoard from \"./board-user.component\"\nimport AdminBoard from \"./board.admin.component\"\nimport ModBoard from \"./board.moderator.component\"\n\nconst App = () => {\n    useEffect( () => {\n        const user = AuthService.getCurrentUser()\n        if ( user ) {\n            setCurrentUser( user )\n            setShowModeratorBoard( user.roles.includes( \"ROLE_MODERATOR\" ) )\n            setShowAdminBoard( user.roles.includes( \"ROLE_ADMIN\" ) )\n        }\n    }, [] )\n\n    const [ showModeratorBoard, setShowModeratorBoard ] = useState( false )\n    const [ showAdminBoard, setShowAdminBoard ] = useState( false )\n    const [ currentUser, setCurrentUser ] = useState( undefined )\n\n\n    return (\n        <Router>\n            <div>\n                <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n                    <Link to={\"/\"} className=\"navbar-brand\"/>\n                    <div className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item\">\n                            <Link to={\"/home\"} className=\"nav-link\">\n                                Home\n                            </Link>\n                        </li>\n                        {showModeratorBoard && (\n                            <li className=\"nav-item\">\n                                <Link to={\"/mod\"} className=\"nav-link\">\n                                    Moderator Board\n                                </Link>\n                            </li>\n                        )}\n                        {showAdminBoard && (\n                            <li className=\"nav-item\">\n                                <Link to={\"/admin\"} className=\"nav-link\">\n                                    Admin Board\n                                </Link>\n                            </li>\n                        )}\n                        {currentUser && (\n                            <li className=\"nav-item\">\n                                <Link to={\"/user\"} className=\"nav-link\">\n                                    User\n                                </Link>\n                            </li>\n                        )}\n                    </div>\n\n                    {currentUser ? (\n                        <div className=\"navbar-nav ml-auto\">\n                            <li className=\"nav-item\">\n                                <Link to={\"/profile\"} className=\"nav-link\">\n                                    {currentUser.username}\n                                </Link>\n                            </li>\n                            <li className=\"nav-item\">\n                                <a href=\"/login\" className=\"nav-link\" onClick={AuthService.logout}>\n                                    LogOut\n                                </a>\n                            </li>\n                        </div>\n                    ) : (\n                        <div className=\"navbar-nav ml-auto\">\n                            <li className=\"nav-item\">\n                                <Link to={\"/login\"} className=\"nav-link\">\n                                    Login\n                                </Link>\n                            </li>\n\n                            <li className=\"nav-item\">\n                                <Link to={\"/register\"} className=\"nav-link\">\n                                    Sign Up\n                                </Link>\n                            </li>\n                        </div>\n                    )}\n                </nav>\n\n                <div className=\"container mt-3\">\n                    <Switch>\n                        <Route exact path={[ \"/\", \"/home\" ]} component={Home}/>\n                        <Route exact path=\"/login\" component={Login}/>\n                        <Route exact path=\"/register\" component={Register}/>\n                        <Route exact path=\"/profile\" component={Profile}/>\n                        <Route path=\"/user\" component={UserBoard}/>\n                        <Route path=\"/mod\" component={ModBoard}/>\n                        <Route path=\"/admin\" component={AdminBoard}/>\n                    </Switch>\n                </div>\n            </div>\n        </Router>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>\n    </BrowserRouter>,\n\n    document.getElementById( 'root' )\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}