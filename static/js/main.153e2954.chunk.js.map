{"version":3,"sources":["services/auth.service.js","components/login.component.js","components/register.component.js","services/auth-header.js","services/user.service.js","components/home.component.js","components/profile.component.js","components/board-user.component.js","components/board.admin.component.js","components/board.moderator.component.js","components/App.js","serviceWorker.js","index.js"],"names":["API_URL","username","password","axios","post","then","response","data","accessToken","localStorage","setItem","JSON","stringify","removeItem","email","parse","getItem","required","value","className","role","Login","history","useHistory","useState","setUsername","setPassword","loginMessage","setLoginMessage","loading","setLoading","loginForm","React","createRef","checkBtn","src","alt","onSubmit","event","preventDefault","validateAll","context","_errors","length","AuthService","login","push","window","location","reload","error","message","toString","ref","c","htmlFor","type","name","onChange","target","validations","disabled","style","display","isEmail","vusername","lenght","vpassword","Register","props","handleRegister","bind","onChangeUsername","onChangeEmail","onChangePassword","state","successful","e","this","setState","form","register","err","resMessage","Component","authHeader","user","get","headers","Home","useEffect","UserService","getPublicContent","setHomeContent","homeContent","Profile","currentUser","getCurrentUser","substring","substr","id","roles","map","index","key","UserBoard","getUserBoard","setUserContent","userContent","AdminBoard","getAdminBoard","setAdminContent","adminContent","ModBoard","getModBoard","setModContent","modContent","App","setCurrentUser","setShowModeratorBoard","includes","setShowAdminBoard","showModeratorBoard","showAdminBoard","undefined","to","href","onClick","logout","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.153e2954.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst API_URL = 'https://portfolio-api-bricemangeat.herokuapp.com/'\n\nclass AuthService {\n    login(username, password) {\n        return axios\n            .post(API_URL + `api/auth/signin`, {\n                username,\n                password\n            })\n            .then(response => {\n                if(response.data.accessToken){\n                    localStorage.setItem('user', JSON.stringify(response.data))\n                }\n                return response.data\n            })\n    }\n    logout(){\n        localStorage.removeItem('user')\n    }\n\n    register(username, email, password){\n        return axios\n            .post(API_URL + `api/auth/signup`, {\n                username,\n                email,\n                password\n        })\n\n    }\n    getCurrentUser(){\n        return JSON.parse(localStorage.getItem('user'))\n    }\n}\n\nexport default new AuthService();\n\n","import React, { useState } from \"react\";\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport CheckButton from \"react-validation/build/button\";\nimport { useHistory } from \"react-router-dom\";\n\n\nimport AuthService from \"../services/auth.service\";\n\nconst required = value => {\n    if ( !value ) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                This field is required!\n            </div>\n        );\n    }\n};\n\nconst Login = () => {\n    const history = useHistory();\n\n    const [ username, setUsername ] = useState( '' )\n    const [ password, setPassword ] = useState( '' )\n    const [ loginMessage, setLoginMessage ] = useState( '' )\n    const [ loading, setLoading ] = useState( false )\n\n    let loginForm = React.createRef()\n    let checkBtn = React.createRef()\n\n    const handleLogin = ( event ) => {\n        event.preventDefault()\n\n        setLoading( true )\n\n        loginForm.validateAll()\n        if ( checkBtn.context._errors.length === 0 ) {\n            AuthService.login( username, password )\n                .then(\n                    () => {\n                        history.push( \"/profile\" );\n                        window.location.reload();\n                    },\n                    ( error ) => {\n                        setLoading( false )\n                        setLoginMessage(\n                            (error.response &&\n                                error.response.data &&\n                                error.response.data.message) ||\n                            error.message ||\n                            error.toString()\n                        )\n                    }\n                )\n        } else {\n            setLoading( false )\n        }\n    }\n\n    return (\n        <div className=\"col-md-12\">\n            <div className=\"card card-container\">\n                <img\n                    src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n                    alt=\"profile-img\"\n                    className=\"profile-img-card\"\n                />\n                <Form onSubmit={handleLogin}\n                      ref={c => {\n                          loginForm = c\n                      }}>\n                    <div className=\"form-group\">\n\n                        <label htmlFor=\"username\">Username</label>\n                        <Input\n                            type=\"text\"\n                            className=\"form-control\"\n                            name=\"username\"\n                            value={username}\n                            onChange={( event ) => setUsername( event.target.value )}\n                            validations={[ required ]}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"password\">Password</label>\n                        <Input\n                            type=\"password\"\n                            className=\"form-control\"\n                            name=\"password\"\n                            value={password}\n                            onChange={( event ) => setPassword( event.target.value )}\n                            validations={[ required ]}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <button\n                            className=\"btn btn-primary btn-block\"\n                            disabled={loading}\n                        >\n                            {loading && (\n                                <span className=\"spinner-border spinner-border-sm\"/>\n                            )}\n                            <span>Login</span>\n                        </button>\n                    </div>\n\n                    {loginMessage && (\n                        <div className=\"form-group\">\n                            <div className=\"alert alert-danger\" role=\"alert\">\n                                {loginMessage}\n                            </div>\n                        </div>\n                    )}\n                    <CheckButton\n                        style={{ display: \"none\" }}\n                        ref={c => {\n                            checkBtn = c\n                        }}\n                    />\n                </Form>\n            </div>\n        </div>\n    )\n}\n\nexport default Login\n","import React, {Component} from \"react\"\nimport Form from \"react-validation/build/form\"\nimport Input from \"react-validation/build/input\"\nimport CheckButton from \"react-validation/build/button\"\nimport {isEmail} from \"validator\"\n\nimport AuthService from \"../services/auth.service\"\n\nconst required = value => {\n    if (!value) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                This field is required\n            </div>\n        )\n    }\n}\n\nconst email = value => {\n    if (!isEmail(value)) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                This is not a valid email.\n            </div>\n        )\n    }\n}\n\nconst vusername = value => {\n    if (value.lenght < 3 || value.lenght > 20) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                The username must be between 3 and 20 characters.\n            </div>\n        )\n    }\n}\n\nconst vpassword = value => {\n    if (value.lenght < 6 || value.lenght > 40) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                The password must be between 6 and 40 characters.\n            </div>\n        )\n    }\n}\n\nexport default class Register extends Component {\n    constructor(props) {\n        super(props)\n        this.handleRegister = this.handleRegister.bind(this)\n        this.onChangeUsername = this.onChangeUsername.bind(this)\n        this.onChangeEmail = this.onChangeEmail.bind(this)\n        this.onChangePassword = this.onChangePassword.bind(this)\n\n        this.state = {\n            username: \"\",\n            email: \"\",\n            password: \"\",\n            successful: false,\n            message: \"\"\n        }\n    }\n\n    onChangeUsername(e) {\n        this.setState({\n            username: e.target.value\n        })\n    }\n\n    onChangeEmail(e) {\n        this.setState({\n            email: e.target.value\n        })\n    }\n\n    onChangePassword(e) {\n        this.setState({\n            password: e.target.value\n        })\n    }\n\n    handleRegister(e) {\n        e.preventDefault()\n\n        this.setState({\n            message: \"\",\n            successful: false\n        })\n\n        this.form.validateAll()\n\n        if (this.checkBtn.context._errors.length === 0) {\n            AuthService.register(\n                this.state.username,\n                this.state.email,\n                this.state.password\n            ).then(\n                response => {\n                    this.setState({\n                            message: response.data.message,\n                            successful: true\n                        }\n                    )\n                },\n                err => {\n                    const resMessage = (err.response && err.response.data && err.response.data.message) || err.message || err.toString()\n                    this.setState({\n                        successful: false,\n                        message: resMessage\n                    })\n                }\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"col-md-12\">\n                <div className=\"card card-container\">\n                    <img\n                        src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n                        alt=\"profile-img\"\n                        className=\"profile-img-card\"\n                    />\n\n                    <Form\n                        onSubmit={this.handleRegister}\n                        ref={c => {\n                            this.form = c;\n                        }}\n                    >\n                        {!this.state.successful && (\n                            <div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"username\">Username</label>\n                                    <Input\n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        name=\"username\"\n                                        value={this.state.username}\n                                        onChange={this.onChangeUsername}\n                                        validations={[required, vusername]}\n                                    />\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\">Email</label>\n                                    <Input\n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        name=\"email\"\n                                        value={this.state.email}\n                                        onChange={this.onChangeEmail}\n                                        validations={[required, email]}\n                                    />\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\">Password</label>\n                                    <Input\n                                        type=\"password\"\n                                        className=\"form-control\"\n                                        name=\"password\"\n                                        value={this.state.password}\n                                        onChange={this.onChangePassword}\n                                        validations={[required, vpassword]}\n                                    />\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <button className=\"btn btn-primary btn-block\">Sign Up</button>\n                                </div>\n                            </div>\n                        )}\n\n                        {this.state.message && (\n                            <div className=\"form-group\">\n                                <div\n                                    className={\n                                        this.state.successful\n                                            ? \"alert alert-success\"\n                                            : \"alert alert-danger\"\n                                    }\n                                    role=\"alert\"\n                                >\n                                    {this.state.message}\n                                </div>\n                            </div>\n                        )}\n                        <CheckButton\n                            style={{ display: \"none\" }}\n                            ref={c => {\n                                this.checkBtn = c;\n                            }}\n                        />\n                    </Form>\n                </div>\n            </div>\n        );\n    }\n}\n\n","export default authHeader => {\n    const user = JSON.parse(localStorage.getItem('user'))\n\n    if(user && user.accessToken) {\n        return { 'jwt-token': user.accessToken}\n    } else {\n        return {}\n    }\n}\n","import axios from 'axios'\nimport authHeader from './auth-header'\n\nconst API_URL = 'https://portfolio-api-bricemangeat.herokuapp.com/api/test/'\n\nclass UserService {\n    getPublicContent() {\n        return axios\n            .get(API_URL + `all`)\n    }\n\n    getUserBoard(){\n        return axios\n            .get(API_URL + `user` , {headers: authHeader()})\n    }\n\n    getModBoard(){\n        return axios\n            .get(API_URL + `mod`, {headers: authHeader()})\n    }\n\n    getAdminBoard(){\n        return axios\n            .get(API_URL + `admin`, {headers: authHeader()})\n    }\n}\n\nexport default new UserService()\n","import React, { useEffect, useState } from \"react\"\n\nimport UserService from \"../services/user.service\"\n\nconst Home = () => {\n    useEffect(()=>{\n        UserService.getPublicContent()\n            .then(\n                response => {\n                    setHomeContent(response.data)\n                },\n                err => {\n                    setHomeContent((err.response && err.response.data) || err.message || err.toString())\n                }\n            )\n    })\n\n    const [homeContent, setHomeContent] = useState(\"\")\n\n    return (\n        <div className=\"container\">\n            <header className=\"jumbotron\">\n                <h3>{homeContent}</h3>\n            </header>\n        </div>\n    )\n}\n\nexport default Home\n","import React, {Component} from \"react\"\nimport AuthService from \"../services/auth.service\"\n\nexport default class Profile extends Component{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentUser: AuthService.getCurrentUser()\n        }\n    }\n\n    render() {\n        const {currentUser} = this.state\n\n        return (\n            <div className=\"container\">\n                <header className=\"jumbotron\">\n                    <h3>\n                        <strong>{currentUser.username}</strong> Profile\n                    </h3>\n                </header>\n                <p>\n                    <strong>Token : </strong>\n                    {currentUser.accessToken.substring(0, 20)} ... {\" \"}\n                    {currentUser.accessToken.substr(currentUser.accessToken.length - 20)}\n                </p>\n                <p>\n                    <strong>ID : </strong>\n                    {currentUser.id}\n                </p>\n                <p>\n                    <strong>Email : </strong>\n                    {currentUser.email}\n                </p>\n                <strong>Authorities</strong>\n                <ul>\n                    {currentUser.roles &&\n                    currentUser.roles.map((role, index) => <li key={index}>{role}</li>)}\n                </ul>\n\n            </div>\n        )\n    }\n\n}\n","import React, { useEffect, useState } from \"react\"\n\nimport UserService from \"../services/user.service\"\n\nconst UserBoard = () => {\n\n    useEffect( () => {\n        UserService.getUserBoard()\n            .then(\n                response => {\n                    setUserContent( response.data )\n                },\n                err => {\n                    setUserContent( (err.response && err.response.data && err.response.data) || err.message || err.toString() )\n                }\n            )\n    }, [] )\n\n    const [ userContent, setUserContent ] = useState(\"\")\n\n    return (\n        <div className=\"container\">\n            <header className=\"jumbotron\">\n                <h3>{userContent}</h3>\n            </header>\n        </div>\n    )\n\n}\n\nexport default UserBoard\n","import React, { useEffect, useState } from \"react\"\n\nimport UserService from \"../services/user.service\"\n\nconst AdminBoard = () => {\n\n    useEffect( () => {\n        UserService.getAdminBoard()\n            .then(\n                response => {\n                    setAdminContent( response.data )\n                },\n                err => {\n                    setAdminContent( (err.response && err.response.data && err.response.data) || err.message || err.toString() )\n                }\n            )\n    }, [] )\n    const [ adminContent, setAdminContent ] = useState( \"\" )\n\n    return (\n        <div className=\"container\">\n            <header className=\"jumbotron\">\n                <h3>{adminContent}</h3>\n            </header>\n        </div>\n    )\n}\n\nexport default AdminBoard\n","import React, { useEffect, useState } from \"react\"\n\nimport UserService from \"../services/user.service\"\n\nconst ModBoard = () => {\n\n    useEffect(() => {\n        UserService.getModBoard()\n            .then(\n                response => {\n                    setModContent( response.data )\n                },\n                err => {\n                    setModContent( (err.response && err.response.data && err.response.data) || err.message || err.toString() )\n                }\n            )\n    }, [])\n    const [modContent, setModContent] = useState(\"\")\n\n    return(\n        <div className=\"container\">\n            <header className=\"jumbotron\">\n                <h3>{modContent}</h3>\n            </header>\n        </div>\n    )\n\n}\n\nexport default ModBoard\n","import React, { useState, useEffect } from \"react\"\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport \"../App.css\"\n\n// Import services\nimport AuthService from \"../services/auth.service\"\n\n// Import components\nimport Login from \"./login.component\"\nimport Register from \"./register.component\"\nimport Home from \"./home.component\"\nimport Profile from \"./profile.component\"\nimport UserBoard from \"./board-user.component\"\nimport AdminBoard from \"./board.admin.component\"\nimport ModBoard from \"./board.moderator.component\"\n\nconst App = () => {\n    useEffect( () => {\n        const user = AuthService.getCurrentUser()\n        if ( user ) {\n            setCurrentUser( user )\n            setShowModeratorBoard( user.roles.includes( \"ROLE_MODERATOR\" ) )\n            setShowAdminBoard( user.roles.includes( \"ROLE_ADMIN\" ) )\n        }\n    }, [] )\n\n    const [ showModeratorBoard, setShowModeratorBoard ] = useState( false )\n    const [ showAdminBoard, setShowAdminBoard ] = useState( false )\n    const [ currentUser, setCurrentUser ] = useState( undefined )\n\n\n    return (\n        <Router>\n            <div>\n                <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n                    <Link to={\"/\"} className=\"navbar-brand\"/>\n                    <div className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item\">\n                            <Link to={\"/home\"} className=\"nav-link\">\n                                Home\n                            </Link>\n                        </li>\n                        {showModeratorBoard && (\n                            <li className=\"nav-item\">\n                                <Link to={\"/mod\"} className=\"nav-link\">\n                                    Moderator Board\n                                </Link>\n                            </li>\n                        )}\n                        {showAdminBoard && (\n                            <li className=\"nav-item\">\n                                <Link to={\"/admin\"} className=\"nav-link\">\n                                    Admin Board\n                                </Link>\n                            </li>\n                        )}\n                        {currentUser && (\n                            <li className=\"nav-item\">\n                                <Link to={\"/user\"} className=\"nav-link\">\n                                    User\n                                </Link>\n                            </li>\n                        )}\n                    </div>\n\n                    {currentUser ? (\n                        <div className=\"navbar-nav ml-auto\">\n                            <li className=\"nav-item\">\n                                <Link to={\"/profile\"} className=\"nav-link\">\n                                    {currentUser.username}\n                                </Link>\n                            </li>\n                            <li className=\"nav-item\">\n                                <a href=\"/login\" className=\"nav-link\" onClick={AuthService.logout}>\n                                    LogOut\n                                </a>\n                            </li>\n                        </div>\n                    ) : (\n                        <div className=\"navbar-nav ml-auto\">\n                            <li className=\"nav-item\">\n                                <Link to={\"/login\"} className=\"nav-link\">\n                                    Login\n                                </Link>\n                            </li>\n\n                            <li className=\"nav-item\">\n                                <Link to={\"/register\"} className=\"nav-link\">\n                                    Sign Up\n                                </Link>\n                            </li>\n                        </div>\n                    )}\n                </nav>\n\n                <div className=\"container mt-3\">\n                    <Switch>\n                        <Route exact path={[ \"/\", \"/home\" ]} component={Home}/>\n                        <Route exact path=\"/login\" component={Login}/>\n                        <Route exact path=\"/register\" component={Register}/>\n                        <Route exact path=\"/profile\" component={Profile}/>\n                        <Route path=\"/user\" component={UserBoard}/>\n                        <Route path=\"/mod\" component={ModBoard}/>\n                        <Route path=\"/admin\" component={AdminBoard}/>\n                    </Switch>\n                </div>\n            </div>\n        </Router>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>\n    </BrowserRouter>,\n\n    document.getElementById( 'root' )\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}