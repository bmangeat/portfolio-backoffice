{"version":3,"sources":["services/auth.service.js","components/login.component.js","components/register.component.js","services/auth-header.js","services/user.service.js","components/home.component.js","components/profile.component.js","components/board-user.component.js","components/board.admin.component.js","components/board.moderator.component.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","username","password","axios","post","then","response","data","accessToken","localStorage","setItem","JSON","stringify","removeItem","email","parse","getItem","required","value","className","role","Login","props","handleLogin","bind","onChangeUsername","onChangePassword","state","loading","message","e","this","setState","target","preventDefault","form","validateAll","checkBtn","context","_errors","length","AuthService","login","history","push","window","location","reload","error","resMessage","toString","src","alt","onSubmit","ref","c","htmlFor","type","name","onChange","validations","disabled","style","display","Component","isEmail","vusername","lenght","vpassword","Register","handleRegister","onChangeEmail","successful","register","err","authHeader","user","get","headers","Home","content","UserService","getPublicContent","Profile","currentUser","getCurrentUser","substring","substr","id","roles","map","index","key","BoardUser","getUserBoard","AdminBoard","getAdminBoard","ModBoard","getModBoard","App","logOut","showModeratorBoard","showAdminBoard","undefined","includes","logout","to","href","onClick","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.b846b3e8.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst API_URL = 'https://portfolio-api-bricemangeat.herokuapp.com/'\n\nclass AuthService {\n    login(username, password) {\n        return axios\n            .post(API_URL + `api/auth/signin`, {\n                username,\n                password\n            })\n            .then(response => {\n                if(response.data.accessToken){\n                    localStorage.setItem('user', JSON.stringify(response.data))\n                }\n                return response.data\n            })\n    }\n    logout(){\n        localStorage.removeItem('user')\n    }\n\n    register(username, email, password){\n        return axios\n            .post(API_URL + `api/auth/signup`, {\n                username,\n                email,\n                password\n        })\n\n    }\n    getCurrentUser(){\n        return JSON.parse(localStorage.getItem('user'))\n    }\n}\n\nexport default new AuthService();\n\n","import React, { Component } from \"react\";\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport CheckButton from \"react-validation/build/button\";\n\nimport AuthService from \"../services/auth.service\";\n\nconst required = value => {\n    if (!value) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                This field is required!\n            </div>\n        );\n    }\n};\n\nexport default class Login extends Component {\n    constructor(props) {\n        super(props);\n        this.handleLogin = this.handleLogin.bind(this);\n        this.onChangeUsername = this.onChangeUsername.bind(this);\n        this.onChangePassword = this.onChangePassword.bind(this);\n\n        this.state = {\n            username: \"\",\n            password: \"\",\n            loading: false,\n            message: \"\"\n        };\n    }\n\n    onChangeUsername(e) {\n        this.setState({\n            username: e.target.value\n        });\n    }\n\n    onChangePassword(e) {\n        this.setState({\n            password: e.target.value\n        });\n    }\n\n    handleLogin(e) {\n        e.preventDefault();\n\n        this.setState({\n            message: \"\",\n            loading: true\n        });\n\n        this.form.validateAll();\n\n        if (this.checkBtn.context._errors.length === 0) {\n            AuthService.login(this.state.username, this.state.password).then(\n                () => {\n                    this.props.history.push(\"/profile\");\n                    window.location.reload();\n                },\n                error => {\n                    const resMessage =\n                        (error.response &&\n                            error.response.data &&\n                            error.response.data.message) ||\n                        error.message ||\n                        error.toString();\n\n                    this.setState({\n                        loading: false,\n                        message: resMessage\n                    });\n                }\n            );\n        } else {\n            this.setState({\n                loading: false\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"col-md-12\">\n                <div className=\"card card-container\">\n                    <img\n                        src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n                        alt=\"profile-img\"\n                        className=\"profile-img-card\"\n                    />\n\n                    <Form\n                        onSubmit={this.handleLogin}\n                        ref={c => {\n                            this.form = c;\n                        }}\n                    >\n                        <div className=\"form-group\">\n                            <label htmlFor=\"username\">Username</label>\n                            <Input\n                                type=\"text\"\n                                className=\"form-control\"\n                                name=\"username\"\n                                value={this.state.username}\n                                onChange={this.onChangeUsername}\n                                validations={[required]}\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"password\">Password</label>\n                            <Input\n                                type=\"password\"\n                                className=\"form-control\"\n                                name=\"password\"\n                                value={this.state.password}\n                                onChange={this.onChangePassword}\n                                validations={[required]}\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <button\n                                className=\"btn btn-primary btn-block\"\n                                disabled={this.state.loading}\n                            >\n                                {this.state.loading && (\n                                    <span className=\"spinner-border spinner-border-sm\"></span>\n                                )}\n                                <span>Login</span>\n                            </button>\n                        </div>\n\n                        {this.state.message && (\n                            <div className=\"form-group\">\n                                <div className=\"alert alert-danger\" role=\"alert\">\n                                    {this.state.message}\n                                </div>\n                            </div>\n                        )}\n                        <CheckButton\n                            style={{ display: \"none\" }}\n                            ref={c => {\n                                this.checkBtn = c;\n                            }}\n                        />\n                    </Form>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, {Component} from \"react\"\nimport Form from \"react-validation/build/form\"\nimport Input from \"react-validation/build/input\"\nimport CheckButton from \"react-validation/build/button\"\nimport {isEmail} from \"validator\"\n\nimport AuthService from \"../services/auth.service\"\n\nconst required = value => {\n    if (!value) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                This field is required\n            </div>\n        )\n    }\n}\n\nconst email = value => {\n    if (!isEmail(value)) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                This is not a valid email.\n            </div>\n        )\n    }\n}\n\nconst vusername = value => {\n    if (value.lenght < 3 || value.lenght > 20) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                The username must be between 3 and 20 characters.\n            </div>\n        )\n    }\n}\n\nconst vpassword = value => {\n    if (value.lenght < 6 || value.lenght > 40) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                The password must be between 6 and 40 characters.\n            </div>\n        )\n    }\n}\n\nexport default class Register extends Component {\n    constructor(props) {\n        super(props)\n        this.handleRegister = this.handleRegister.bind(this)\n        this.onChangeUsername = this.onChangeUsername.bind(this)\n        this.onChangeEmail = this.onChangeEmail.bind(this)\n        this.onChangePassword = this.onChangePassword.bind(this)\n\n        this.state = {\n            username: \"\",\n            email: \"\",\n            password: \"\",\n            successful: false,\n            message: \"\"\n        }\n    }\n\n    onChangeUsername(e) {\n        this.setState({\n            username: e.target.value\n        })\n    }\n\n    onChangeEmail(e) {\n        this.setState({\n            email: e.target.value\n        })\n    }\n\n    onChangePassword(e) {\n        this.setState({\n            password: e.target.value\n        })\n    }\n\n    handleRegister(e) {\n        e.preventDefault()\n\n        this.setState({\n            message: \"\",\n            successful: false\n        })\n\n        this.form.validateAll()\n\n        if (this.checkBtn.context._errors.length === 0) {\n            AuthService.register(\n                this.state.username,\n                this.state.email,\n                this.state.password\n            ).then(\n                response => {\n                    this.setState({\n                            message: response.data.message,\n                            successful: true\n                        }\n                    )\n                },\n                err => {\n                    const resMessage = (err.response && err.response.data && err.response.data.message) || err.message || err.toString()\n                    this.setState({\n                        successful: false,\n                        message: resMessage\n                    })\n                }\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"col-md-12\">\n                <div className=\"card card-container\">\n                    <img\n                        src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n                        alt=\"profile-img\"\n                        className=\"profile-img-card\"\n                    />\n\n                    <Form\n                        onSubmit={this.handleRegister}\n                        ref={c => {\n                            this.form = c;\n                        }}\n                    >\n                        {!this.state.successful && (\n                            <div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"username\">Username</label>\n                                    <Input\n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        name=\"username\"\n                                        value={this.state.username}\n                                        onChange={this.onChangeUsername}\n                                        validations={[required, vusername]}\n                                    />\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\">Email</label>\n                                    <Input\n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        name=\"email\"\n                                        value={this.state.email}\n                                        onChange={this.onChangeEmail}\n                                        validations={[required, email]}\n                                    />\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\">Password</label>\n                                    <Input\n                                        type=\"password\"\n                                        className=\"form-control\"\n                                        name=\"password\"\n                                        value={this.state.password}\n                                        onChange={this.onChangePassword}\n                                        validations={[required, vpassword]}\n                                    />\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <button className=\"btn btn-primary btn-block\">Sign Up</button>\n                                </div>\n                            </div>\n                        )}\n\n                        {this.state.message && (\n                            <div className=\"form-group\">\n                                <div\n                                    className={\n                                        this.state.successful\n                                            ? \"alert alert-success\"\n                                            : \"alert alert-danger\"\n                                    }\n                                    role=\"alert\"\n                                >\n                                    {this.state.message}\n                                </div>\n                            </div>\n                        )}\n                        <CheckButton\n                            style={{ display: \"none\" }}\n                            ref={c => {\n                                this.checkBtn = c;\n                            }}\n                        />\n                    </Form>\n                </div>\n            </div>\n        );\n    }\n}\n\n","export default authHeader => {\n    const user = JSON.parse(localStorage.getItem('user'))\n\n    if(user && user.accessToken) {\n        return { 'jwt-token': user.accessToken}\n    } else {\n        return {}\n    }\n}\n","import axios from 'axios'\nimport authHeader from './auth-header'\n\nconst API_URL = 'https://portfolio-api-bricemangeat.herokuapp.com/api/test/'\n\nclass UserService {\n    getPublicContent() {\n        return axios\n            .get(API_URL + `all`)\n    }\n\n    getUserBoard(){\n        return axios\n            .get(API_URL + `user` , {headers: authHeader()})\n    }\n\n    getModBoard(){\n        return axios\n            .get(API_URL + `mod`, {headers: authHeader()})\n    }\n\n    getAdminBoard(){\n        return axios\n            .get(API_URL + `admin`, {headers: authHeader()})\n    }\n}\n\nexport default new UserService()\n","import React, {Component} from \"react\"\n\nimport UserService from \"../services/user.service\"\n\nexport default class Home extends Component{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            content: \"\"\n        }\n    }\n\n    componentDidMount() {\n        UserService.getPublicContent()\n            .then(\n                response => {\n                    this.setState({\n                        content : response.data\n                    })\n                },\n                err => {\n                    this.setState({\n                        content: (err.response && err.response.data) || err.message || err.toString()\n                    })\n                }\n            )\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <header className=\"jumbotron\">\n                    <h3>{this.state.content}</h3>\n                </header>\n            </div>\n        )\n    }\n\n\n}\n","import React, {Component} from \"react\"\nimport AuthService from \"../services/auth.service\"\n\nexport default class Profile extends Component{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentUser: AuthService.getCurrentUser()\n        }\n    }\n\n    render() {\n        const {currentUser} = this.state\n\n        return (\n            <div className=\"container\">\n                <header className=\"jumbotron\">\n                    <h3>\n                        <strong>{currentUser.username}</strong> Profile\n                    </h3>\n                </header>\n                <p>\n                    <strong>Token : </strong>\n                    {currentUser.accessToken.substring(0, 20)} ... {\" \"}\n                    {currentUser.accessToken.substr(currentUser.accessToken.length - 20)}\n                </p>\n                <p>\n                    <strong>ID : </strong>\n                    {currentUser.id}\n                </p>\n                <p>\n                    <strong>Email : </strong>\n                    {currentUser.email}\n                </p>\n                <strong>Authorities</strong>\n                <ul>\n                    {currentUser.roles &&\n                    currentUser.roles.map((role, index) => <li key={index}>{role}</li>)}\n                </ul>\n\n            </div>\n        )\n    }\n\n}\n","import React, {Component} from \"react\"\n\nimport UserService from \"../services/user.service\"\n\nexport default class BoardUser extends Component{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            content : \"\"\n        }\n    }\n\n    componentDidMount() {\n        UserService.getUserBoard()\n            .then(\n                response => {\n                    this.setState({\n                        content: response.data\n                    })\n                },\n                err => {\n                    this.setState({\n                        content : (err.response && err.response.data && err.response.data) || err.message || err.toString()\n                    })\n                }\n            )\n    }\n\n    render() {\n        return(\n            <div className=\"container\">\n                <header className=\"jumbotron\">\n                    <h3>{this.state.content}</h3>\n                </header>\n            </div>\n        )\n    }\n\n}\n","import React, {Component} from \"react\"\n\nimport UserService from \"../services/user.service\"\n\nexport default class AdminBoard extends Component{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            content : \"\"\n        }\n    }\n\n    componentDidMount() {\n        UserService.getAdminBoard()\n            .then(\n                response => {\n                    this.setState({\n                        content: response.data\n                    })\n                },\n                err => {\n                    this.setState({\n                        content : (err.response && err.response.data && err.response.data) || err.message || err.toString()\n                    })\n                }\n            )\n    }\n\n    render() {\n        return(\n            <div className=\"container\">\n                <header className=\"jumbotron\">\n                    <h3>{this.state.content}</h3>\n                </header>\n            </div>\n        )\n    }\n\n}\n","import React, {Component} from \"react\"\n\nimport UserService from \"../services/user.service\"\n\nexport default class ModBoard extends Component{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            content : \"\"\n        }\n    }\n\n    componentDidMount() {\n        UserService.getModBoard()\n            .then(\n                response => {\n                    this.setState({\n                        content: response.data\n                    })\n                },\n                err => {\n                    this.setState({\n                        content : (err.response && err.response.data && err.response.data) || err.message || err.toString()\n                    })\n                }\n            )\n    }\n\n    render() {\n        return(\n            <div className=\"container\">\n                <header className=\"jumbotron\">\n                    <h3>{this.state.content}</h3>\n                </header>\n            </div>\n        )\n    }\n\n}\n","import React, {Component} from \"react\"\nimport {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\"\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport \"./App.css\"\n\nimport AuthService from \"./services/auth.service\"\n\nimport Login from \"./components/login.component\"\nimport Register from \"./components/register.component\"\nimport Home from \"./components/home.component\"\nimport Profile from \"./components/profile.component\"\nimport BoardUser from \"./components/board-user.component\"\nimport AdminBoard from \"./components/board.admin.component\"\nimport ModBoard from \"./components/board.moderator.component\"\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.logOut = this.logOut.bind(this)\n\n        this.state = {\n            showModeratorBoard: false,\n            showAdminBoard: false,\n            currentUser: undefined\n        }\n\n    }\n\n    componentDidMount() {\n        const user = AuthService.getCurrentUser()\n        if (user) {\n            this.setState({\n                currentUser: user,\n                showModeratorBoard: user.roles.includes(\"ROLE_MODERATOR\"),\n                showAdminBoard: user.roles.includes(\"ROLE_ADMIN\")\n\n            })\n        }\n    }\n\n    logOut() {\n        AuthService.logout()\n    }\n\n\n    render() {\n        const {currentUser, showModeratorBoard, showAdminBoard} = this.state\n\n      return (\n          <Router>\n            <div>\n              <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n                <Link to={\"/\"} className=\"navbar-brand\"></Link>\n                <div className=\"navbar-nav mr-auto\">\n                  <li className=\"nav-item\">\n                    <Link to={\"/home\"} className=\"nav-link\">\n                      Home\n                    </Link>\n                  </li>\n                  {showModeratorBoard && (\n                      <li className=\"nav-item\">\n                        <Link to={\"/mod\"} className=\"nav-link\">\n                          Moderator Board\n                        </Link>\n                      </li>\n                  )}\n                  {showAdminBoard && (\n                      <li className=\"nav-item\">\n                        <Link to={\"/admin\"} className=\"nav-link\">\n                          Admin Board\n                        </Link>\n                      </li>\n                  )}\n                  {currentUser && (\n                      <li className=\"nav-item\">\n                        <Link to={\"/user\"} className=\"nav-link\">\n                          User\n                        </Link>\n                      </li>\n                  )}\n                </div>\n\n                {currentUser ? (\n                    <div className=\"navbar-nav ml-auto\">\n                      <li className=\"nav-item\">\n                        <Link to={\"/profile\"} className=\"nav-link\">\n                          {currentUser.username}\n                        </Link>\n                      </li>\n                      <li className=\"nav-item\">\n                        <a href=\"/login\" className=\"nav-link\" onClick={this.logOut}>\n                          LogOut\n                        </a>\n                      </li>\n                    </div>\n                ) : (\n                    <div className=\"navbar-nav ml-auto\">\n                      <li className=\"nav-item\">\n                        <Link to={\"/login\"} className=\"nav-link\">\n                          Login\n                        </Link>\n                      </li>\n\n                      <li className=\"nav-item\">\n                        <Link to={\"/register\"} className=\"nav-link\">\n                          Sign Up\n                        </Link>\n                      </li>\n                    </div>\n                )}\n              </nav>\n\n              <div className=\"container mt-3\">\n                <Switch>\n                  <Route exact path={[\"/\", \"/home\"]} component={Home} />\n                  <Route exact path=\"/login\" component={Login} />\n                  <Route exact path=\"/register\" component={Register} />\n                  <Route exact path=\"/profile\" component={Profile} />\n                  <Route path=\"/user\" component={BoardUser} />\n                  <Route path=\"/mod\" component={ModBoard} />\n                  <Route path=\"/admin\" component={AdminBoard} />                </Switch>\n              </div>\n            </div>\n          </Router>\n      )\n    }\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom'\n\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>,\n\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}